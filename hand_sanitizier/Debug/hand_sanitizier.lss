
hand_sanitizier.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000784  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000784  00000818  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800066  00800066  0000081e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000081e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000850  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000358e  00000000  00000000  00000a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001097  00000000  00000000  00004012  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c73  00000000  00000000  000050a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000448  00000000  00000000  00005d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000be9  00000000  00000000  00006164  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000109d  00000000  00000000  00006d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00007dea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e8       	ldi	r30, 0x84	; 132
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ba 01 	call	0x374	; 0x374 <main>
  8a:	0c 94 c0 03 	jmp	0x780	; 0x780 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_ZN8CAvrGpio4InitEPVhai>:

#include "AvrGpio.h"

void CAvrGpio::Init(volatile uint8_t* gpioBase,int8_t pinNumber,int mode)
{
	m_gpioBase=gpioBase;
  92:	dc 01       	movw	r26, r24
  94:	6d 93       	st	X+, r22
  96:	7c 93       	st	X, r23
	m_pinNumber=1<<pinNumber;
  98:	e1 e0       	ldi	r30, 0x01	; 1
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	df 01       	movw	r26, r30
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <_ZN8CAvrGpio4InitEPVhai+0x12>
  a0:	aa 0f       	add	r26, r26
  a2:	bb 1f       	adc	r27, r27
  a4:	4a 95       	dec	r20
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <_ZN8CAvrGpio4InitEPVhai+0xe>
  a8:	ad 01       	movw	r20, r26
  aa:	fc 01       	movw	r30, r24
  ac:	a2 83       	std	Z+2, r26	; 0x02
	if(mode)
  ae:	23 2b       	or	r18, r19
  b0:	41 f0       	breq	.+16     	; 0xc2 <_ZN8CAvrGpio4InitEPVhai+0x30>
		*(m_gpioBase+1)|=m_pinNumber;	
  b2:	db 01       	movw	r26, r22
  b4:	11 96       	adiw	r26, 0x01	; 1
  b6:	8c 91       	ld	r24, X
  b8:	11 97       	sbiw	r26, 0x01	; 1
  ba:	48 2b       	or	r20, r24
  bc:	11 96       	adiw	r26, 0x01	; 1
  be:	4c 93       	st	X, r20
  c0:	08 95       	ret
	else
		*(m_gpioBase+1)&=~(m_pinNumber);
  c2:	fb 01       	movw	r30, r22
  c4:	81 81       	ldd	r24, Z+1	; 0x01
  c6:	40 95       	com	r20
  c8:	48 23       	and	r20, r24
  ca:	41 83       	std	Z+1, r20	; 0x01
  cc:	08 95       	ret

000000ce <_ZN8CAvrGpio3SetEv>:
}

void CAvrGpio::Set()
{
  ce:	dc 01       	movw	r26, r24
	*(m_gpioBase+2)|=m_pinNumber;
  d0:	ed 91       	ld	r30, X+
  d2:	fc 91       	ld	r31, X
  d4:	11 97       	sbiw	r26, 0x01	; 1
  d6:	92 81       	ldd	r25, Z+2	; 0x02
  d8:	12 96       	adiw	r26, 0x02	; 2
  da:	8c 91       	ld	r24, X
  dc:	89 2b       	or	r24, r25
  de:	82 83       	std	Z+2, r24	; 0x02
  e0:	08 95       	ret

000000e2 <_ZN8CAvrGpio3GetEv>:
}

bool CAvrGpio::Get()
{
  e2:	fc 01       	movw	r30, r24
	return *(m_gpioBase)&m_pinNumber;
  e4:	a0 81       	ld	r26, Z
  e6:	b1 81       	ldd	r27, Z+1	; 0x01
  e8:	9c 91       	ld	r25, X
  ea:	22 81       	ldd	r18, Z+2	; 0x02
  ec:	02 2e       	mov	r0, r18
  ee:	00 0c       	add	r0, r0
  f0:	33 0b       	sbc	r19, r19
  f2:	89 2f       	mov	r24, r25
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	28 23       	and	r18, r24
  f8:	39 23       	and	r19, r25
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	23 2b       	or	r18, r19
  fe:	09 f4       	brne	.+2      	; 0x102 <_ZN8CAvrGpio3GetEv+0x20>
 100:	80 e0       	ldi	r24, 0x00	; 0
}
 102:	08 95       	ret

00000104 <_ZN8CAvrGpio5ClearEv>:

void CAvrGpio::Clear()
{
 104:	dc 01       	movw	r26, r24
	*(m_gpioBase+2)&=~(m_pinNumber);
 106:	ed 91       	ld	r30, X+
 108:	fc 91       	ld	r31, X
 10a:	11 97       	sbiw	r26, 0x01	; 1
 10c:	92 81       	ldd	r25, Z+2	; 0x02
 10e:	12 96       	adiw	r26, 0x02	; 2
 110:	8c 91       	ld	r24, X
 112:	80 95       	com	r24
 114:	89 23       	and	r24, r25
 116:	82 83       	std	Z+2, r24	; 0x02
 118:	08 95       	ret

0000011a <_ZN8CAvrGpio6ToggleEv>:
}

void CAvrGpio::Toggle()
{
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	ec 01       	movw	r28, r24
	if(Get())
 120:	0e 94 71 00 	call	0xe2	; 0xe2 <_ZN8CAvrGpio3GetEv>
 124:	88 23       	and	r24, r24
 126:	21 f0       	breq	.+8      	; 0x130 <_ZN8CAvrGpio6ToggleEv+0x16>
		Clear();
 128:	ce 01       	movw	r24, r28
 12a:	0e 94 82 00 	call	0x104	; 0x104 <_ZN8CAvrGpio5ClearEv>
 12e:	03 c0       	rjmp	.+6      	; 0x136 <_ZN8CAvrGpio6ToggleEv+0x1c>
	else
		Set();
 130:	ce 01       	movw	r24, r28
 132:	0e 94 67 00 	call	0xce	; 0xce <_ZN8CAvrGpio3SetEv>
}
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <_ZN8CAvrGpioC1Ev>:

// default constructor
CAvrGpio::CAvrGpio()
 13c:	08 95       	ret

0000013e <_ZN9CAvrTimer4InitENS_12avrPrescalerE>:

#include "AvrTimer.h"

void CAvrTimer::Init(avrPrescaler prescaler)
{
	TCCR1B=(uint8_t)prescaler;
 13e:	6e bd       	out	0x2e, r22	; 46
 140:	08 95       	ret

00000142 <_ZN9CAvrTimer7GetTickEv>:
}

uint16_t CAvrTimer::GetTick()
{
	return TCNT1;
 142:	8c b5       	in	r24, 0x2c	; 44
 144:	9d b5       	in	r25, 0x2d	; 45
}
 146:	08 95       	ret

00000148 <_ZN9CAvrTimerC1Ev>:

// default constructor
CAvrTimer::CAvrTimer()
 148:	08 95       	ret

0000014a <_ZN10CHeartBeat4InitEP8CAvrGpioP9CAvrTimerj>:


#include "HeartBeat.h"

void CHeartBeat::Init(CAvrGpio *ledInstance,CAvrTimer *timerInstance,uint16_t period)
{
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	89 01       	movw	r16, r18
	m_led=ledInstance;
 154:	ec 01       	movw	r28, r24
 156:	69 93       	st	Y+, r22
 158:	79 93       	st	Y+, r23
	m_timer.Init(timerInstance);
 15a:	ba 01       	movw	r22, r20
 15c:	ce 01       	movw	r24, r28
 15e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <_ZN8CTimeout4InitEP9CAvrTimer>
	m_timer.SetExpiry(period);
 162:	b8 01       	movw	r22, r16
 164:	ce 01       	movw	r24, r28
 166:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_ZN8CTimeout9SetExpiryEj>
}
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	1f 91       	pop	r17
 170:	0f 91       	pop	r16
 172:	08 95       	ret

00000174 <_ZN10CHeartBeat7ExecuteEv>:
	
void CHeartBeat::Execute()
{
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	ec 01       	movw	r28, r24
	if(!m_timer.HasElapsed())
 17e:	8c 01       	movw	r16, r24
 180:	0e 5f       	subi	r16, 0xFE	; 254
 182:	1f 4f       	sbci	r17, 0xFF	; 255
 184:	c8 01       	movw	r24, r16
 186:	0e 94 85 02 	call	0x50a	; 0x50a <_ZN8CTimeout10HasElapsedEv>
 18a:	88 23       	and	r24, r24
 18c:	39 f0       	breq	.+14     	; 0x19c <_ZN10CHeartBeat7ExecuteEv+0x28>
		return;
	m_timer.Reset();
 18e:	c8 01       	movw	r24, r16
 190:	0e 94 72 02 	call	0x4e4	; 0x4e4 <_ZN8CTimeout5ResetEv>
	m_led->Toggle();
 194:	88 81       	ld	r24, Y
 196:	99 81       	ldd	r25, Y+1	; 0x01
 198:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZN8CAvrGpio6ToggleEv>
	
}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	08 95       	ret

000001a6 <_ZN10CHeartBeatC1Ev>:

// default constructor
CHeartBeat::CHeartBeat()
 1a6:	02 96       	adiw	r24, 0x02	; 2
 1a8:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN8CTimeoutC1Ev>
 1ac:	08 95       	ret

000001ae <_ZN4CLcd11WriteNibbleEh>:
    Send(command, 0);
}

void CLcd::Write(uint8_t value)
{
    Send(value, 1);
 1ae:	cf 92       	push	r12
 1b0:	df 92       	push	r13
 1b2:	ef 92       	push	r14
 1b4:	ff 92       	push	r15
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	7c 01       	movw	r14, r24
 1c0:	00 e0       	ldi	r16, 0x00	; 0
 1c2:	10 e0       	ldi	r17, 0x00	; 0
 1c4:	c0 e0       	ldi	r28, 0x00	; 0
 1c6:	d0 e0       	ldi	r29, 0x00	; 0
 1c8:	c6 2e       	mov	r12, r22
 1ca:	d1 2c       	mov	r13, r1
 1cc:	c6 01       	movw	r24, r12
 1ce:	0c 2e       	mov	r0, r28
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <_ZN4CLcd11WriteNibbleEh+0x28>
 1d2:	95 95       	asr	r25
 1d4:	87 95       	ror	r24
 1d6:	0a 94       	dec	r0
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <_ZN4CLcd11WriteNibbleEh+0x24>
 1da:	80 ff       	sbrs	r24, 0
 1dc:	0c c0       	rjmp	.+24     	; 0x1f6 <_ZN4CLcd11WriteNibbleEh+0x48>
 1de:	d7 01       	movw	r26, r14
 1e0:	16 96       	adiw	r26, 0x06	; 6
 1e2:	ed 91       	ld	r30, X+
 1e4:	fc 91       	ld	r31, X
 1e6:	17 97       	sbiw	r26, 0x07	; 7
 1e8:	e0 0f       	add	r30, r16
 1ea:	f1 1f       	adc	r31, r17
 1ec:	80 81       	ld	r24, Z
 1ee:	91 81       	ldd	r25, Z+1	; 0x01
 1f0:	0e 94 67 00 	call	0xce	; 0xce <_ZN8CAvrGpio3SetEv>
 1f4:	0b c0       	rjmp	.+22     	; 0x20c <_ZN4CLcd11WriteNibbleEh+0x5e>
 1f6:	d7 01       	movw	r26, r14
 1f8:	16 96       	adiw	r26, 0x06	; 6
 1fa:	ed 91       	ld	r30, X+
 1fc:	fc 91       	ld	r31, X
 1fe:	17 97       	sbiw	r26, 0x07	; 7
 200:	e0 0f       	add	r30, r16
 202:	f1 1f       	adc	r31, r17
 204:	80 81       	ld	r24, Z
 206:	91 81       	ldd	r25, Z+1	; 0x01
 208:	0e 94 82 00 	call	0x104	; 0x104 <_ZN8CAvrGpio5ClearEv>
 20c:	21 96       	adiw	r28, 0x01	; 1
 20e:	0e 5f       	subi	r16, 0xFE	; 254
 210:	1f 4f       	sbci	r17, 0xFF	; 255
 212:	c4 30       	cpi	r28, 0x04	; 4
 214:	d1 05       	cpc	r29, r1
 216:	d1 f6       	brne	.-76     	; 0x1cc <_ZN4CLcd11WriteNibbleEh+0x1e>
 218:	f7 01       	movw	r30, r14
 21a:	82 81       	ldd	r24, Z+2	; 0x02
 21c:	93 81       	ldd	r25, Z+3	; 0x03
 21e:	0e 94 82 00 	call	0x104	; 0x104 <_ZN8CAvrGpio5ClearEv>
 222:	d7 01       	movw	r26, r14
 224:	12 96       	adiw	r26, 0x02	; 2
 226:	8d 91       	ld	r24, X+
 228:	9c 91       	ld	r25, X
 22a:	13 97       	sbiw	r26, 0x03	; 3
 22c:	0e 94 67 00 	call	0xce	; 0xce <_ZN8CAvrGpio3SetEv>
 230:	f7 01       	movw	r30, r14
 232:	82 81       	ldd	r24, Z+2	; 0x02
 234:	93 81       	ldd	r25, Z+3	; 0x03
 236:	0e 94 82 00 	call	0x104	; 0x104 <_ZN8CAvrGpio5ClearEv>
 23a:	8f e9       	ldi	r24, 0x9F	; 159
 23c:	9f e0       	ldi	r25, 0x0F	; 15
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <_ZN4CLcd11WriteNibbleEh+0x90>
 242:	00 c0       	rjmp	.+0      	; 0x244 <_ZN4CLcd11WriteNibbleEh+0x96>
 244:	00 00       	nop
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	1f 91       	pop	r17
 24c:	0f 91       	pop	r16
 24e:	ff 90       	pop	r15
 250:	ef 90       	pop	r14
 252:	df 90       	pop	r13
 254:	cf 90       	pop	r12
 256:	08 95       	ret

00000258 <_ZN4CLcd4SendEhh>:
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	ec 01       	movw	r28, r24
 260:	16 2f       	mov	r17, r22
 262:	44 23       	and	r20, r20
 264:	29 f0       	breq	.+10     	; 0x270 <_ZN4CLcd4SendEhh+0x18>
 266:	88 81       	ld	r24, Y
 268:	99 81       	ldd	r25, Y+1	; 0x01
 26a:	0e 94 67 00 	call	0xce	; 0xce <_ZN8CAvrGpio3SetEv>
 26e:	04 c0       	rjmp	.+8      	; 0x278 <_ZN4CLcd4SendEhh+0x20>
 270:	88 81       	ld	r24, Y
 272:	99 81       	ldd	r25, Y+1	; 0x01
 274:	0e 94 82 00 	call	0x104	; 0x104 <_ZN8CAvrGpio5ClearEv>
 278:	8c 81       	ldd	r24, Y+4	; 0x04
 27a:	9d 81       	ldd	r25, Y+5	; 0x05
 27c:	0e 94 82 00 	call	0x104	; 0x104 <_ZN8CAvrGpio5ClearEv>
 280:	61 2f       	mov	r22, r17
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	75 95       	asr	r23
 286:	67 95       	ror	r22
 288:	75 95       	asr	r23
 28a:	67 95       	ror	r22
 28c:	75 95       	asr	r23
 28e:	67 95       	ror	r22
 290:	75 95       	asr	r23
 292:	67 95       	ror	r22
 294:	ce 01       	movw	r24, r28
 296:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN4CLcd11WriteNibbleEh>
 29a:	61 2f       	mov	r22, r17
 29c:	ce 01       	movw	r24, r28
 29e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN4CLcd11WriteNibbleEh>
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	1f 91       	pop	r17
 2a8:	08 95       	ret

000002aa <_ZN4CLcd7CommandEh>:
 2aa:	40 e0       	ldi	r20, 0x00	; 0
 2ac:	0e 94 2c 01 	call	0x258	; 0x258 <_ZN4CLcd4SendEhh>
 2b0:	08 95       	ret

000002b2 <_ZN4CLcd4InitEP8CAvrGpioS1_S1_PS1_hh>:
    m_pEn->Clear();
    
    _delay_ms(1);																// If delay less than this value, the data is not correctly displayed
}

void CLcd::Init(CAvrGpio *pRs,CAvrGpio *pEn,CAvrGpio *pRw,CAvrGpio **pDt,uint8_t numOfCol,uint8_t numOfRow) {
 2b2:	cf 92       	push	r12
 2b4:	ef 92       	push	r14
 2b6:	0f 93       	push	r16
 2b8:	1f 93       	push	r17
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	ec 01       	movw	r28, r24
    // Configure pins as output
    m_pRs=pRs;
 2c0:	79 83       	std	Y+1, r23	; 0x01
 2c2:	68 83       	st	Y, r22
    m_pEn=pEn;
 2c4:	5b 83       	std	Y+3, r21	; 0x03
 2c6:	4a 83       	std	Y+2, r20	; 0x02
    m_pRw=pRw;
 2c8:	3d 83       	std	Y+5, r19	; 0x05
 2ca:	2c 83       	std	Y+4, r18	; 0x04
    m_pDt=pDt;
 2cc:	1f 83       	std	Y+7, r17	; 0x07
 2ce:	0e 83       	std	Y+6, r16	; 0x06
    m_col=numOfCol;
 2d0:	e8 86       	std	Y+8, r14	; 0x08
    m_row=numOfRow;
 2d2:	c9 86       	std	Y+9, r12	; 0x09
    m_buffer = (char*)malloc(m_col);
 2d4:	8e 2d       	mov	r24, r14
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 9f 02 	call	0x53e	; 0x53e <malloc>
 2dc:	9c 87       	std	Y+12, r25	; 0x0c
 2de:	8b 87       	std	Y+11, r24	; 0x0b
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e0:	8f e5       	ldi	r24, 0x5F	; 95
 2e2:	9a ee       	ldi	r25, 0xEA	; 234
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <_ZN4CLcd4InitEP8CAvrGpioS1_S1_PS1_hh+0x32>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <_ZN4CLcd4InitEP8CAvrGpioS1_S1_PS1_hh+0x38>
 2ea:	00 00       	nop
    
    // Wait for LCD to become ready (docs say 15ms+)
    _delay_ms(15);
    
    m_pEn->Clear();
 2ec:	8a 81       	ldd	r24, Y+2	; 0x02
 2ee:	9b 81       	ldd	r25, Y+3	; 0x03
 2f0:	0e 94 82 00 	call	0x104	; 0x104 <_ZN8CAvrGpio5ClearEv>
    m_pRs->Clear();
 2f4:	88 81       	ld	r24, Y
 2f6:	99 81       	ldd	r25, Y+1	; 0x01
 2f8:	0e 94 82 00 	call	0x104	; 0x104 <_ZN8CAvrGpio5ClearEv>
    m_pRw->Clear();
 2fc:	8c 81       	ldd	r24, Y+4	; 0x04
 2fe:	9d 81       	ldd	r25, Y+5	; 0x05
 300:	0e 94 82 00 	call	0x104	; 0x104 <_ZN8CAvrGpio5ClearEv>
 304:	8f e1       	ldi	r24, 0x1F	; 31
 306:	9e e4       	ldi	r25, 0x4E	; 78
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <_ZN4CLcd4InitEP8CAvrGpioS1_S1_PS1_hh+0x56>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <_ZN4CLcd4InitEP8CAvrGpioS1_S1_PS1_hh+0x5c>
 30e:	00 00       	nop

    _delay_ms(5);

    WriteNibble(0x03); // Switch to 4 bit mode
 310:	63 e0       	ldi	r22, 0x03	; 3
 312:	ce 01       	movw	r24, r28
 314:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN4CLcd11WriteNibbleEh>
 318:	8f e1       	ldi	r24, 0x1F	; 31
 31a:	9e e4       	ldi	r25, 0x4E	; 78
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <_ZN4CLcd4InitEP8CAvrGpioS1_S1_PS1_hh+0x6a>
 320:	00 c0       	rjmp	.+0      	; 0x322 <_ZN4CLcd4InitEP8CAvrGpioS1_S1_PS1_hh+0x70>
 322:	00 00       	nop
    _delay_ms(5);

    WriteNibble(0x03); // 2nd time
 324:	63 e0       	ldi	r22, 0x03	; 3
 326:	ce 01       	movw	r24, r28
 328:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN4CLcd11WriteNibbleEh>
 32c:	8f e1       	ldi	r24, 0x1F	; 31
 32e:	9e e4       	ldi	r25, 0x4E	; 78
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <_ZN4CLcd4InitEP8CAvrGpioS1_S1_PS1_hh+0x7e>
 334:	00 c0       	rjmp	.+0      	; 0x336 <_ZN4CLcd4InitEP8CAvrGpioS1_S1_PS1_hh+0x84>
 336:	00 00       	nop
    _delay_ms(5);

    WriteNibble(0x03); // 3rd time
 338:	63 e0       	ldi	r22, 0x03	; 3
 33a:	ce 01       	movw	r24, r28
 33c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN4CLcd11WriteNibbleEh>
 340:	8f e1       	ldi	r24, 0x1F	; 31
 342:	9e e4       	ldi	r25, 0x4E	; 78
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <_ZN4CLcd4InitEP8CAvrGpioS1_S1_PS1_hh+0x92>
 348:	00 c0       	rjmp	.+0      	; 0x34a <_ZN4CLcd4InitEP8CAvrGpioS1_S1_PS1_hh+0x98>
 34a:	00 00       	nop
    _delay_ms(5);

    WriteNibble(0x02); // Set 8-bit mode (?)
 34c:	62 e0       	ldi	r22, 0x02	; 2
 34e:	ce 01       	movw	r24, r28
 350:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN4CLcd11WriteNibbleEh>

    Command(LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 354:	68 e2       	ldi	r22, 0x28	; 40
 356:	ce 01       	movw	r24, r28
 358:	0e 94 55 01 	call	0x2aa	; 0x2aa <_ZN4CLcd7CommandEh>

    m_displayparams = LCD_CURSOROFF | LCD_BLINKOFF;
 35c:	1a 86       	std	Y+10, r1	; 0x0a
    Command(LCD_DISPLAYCONTROL | m_displayparams);
 35e:	68 e0       	ldi	r22, 0x08	; 8
 360:	ce 01       	movw	r24, r28
 362:	0e 94 55 01 	call	0x2aa	; 0x2aa <_ZN4CLcd7CommandEh>
}
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	1f 91       	pop	r17
 36c:	0f 91       	pop	r16
 36e:	ef 90       	pop	r14
 370:	cf 90       	pop	r12
 372:	08 95       	ret

00000374 <main>:
#include "PinMapping.h"
#include "lcd.h"


int main(void)
{
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	cd b7       	in	r28, 0x3d	; 61
 37a:	de b7       	in	r29, 0x3e	; 62
 37c:	e7 97       	sbiw	r28, 0x37	; 55
 37e:	0f b6       	in	r0, 0x3f	; 63
 380:	f8 94       	cli
 382:	de bf       	out	0x3e, r29	; 62
 384:	0f be       	out	0x3f, r0	; 63
 386:	cd bf       	out	0x3d, r28	; 61
	// heartbeat init
	CHeartBeat heartBeat;
 388:	ce 01       	movw	r24, r28
 38a:	01 96       	adiw	r24, 0x01	; 1
 38c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_ZN10CHeartBeatC1Ev>
	CAvrGpio led;
 390:	ce 01       	movw	r24, r28
 392:	0a 96       	adiw	r24, 0x0a	; 10
 394:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN8CAvrGpioC1Ev>
	CAvrTimer timer;
 398:	ce 01       	movw	r24, r28
 39a:	0d 96       	adiw	r24, 0x0d	; 13
 39c:	0e 94 a4 00 	call	0x148	; 0x148 <_ZN9CAvrTimerC1Ev>
	led.Init(PIN_HEARTBEAT,1);
 3a0:	21 e0       	ldi	r18, 0x01	; 1
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	40 e0       	ldi	r20, 0x00	; 0
 3a6:	66 e3       	ldi	r22, 0x36	; 54
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	ce 01       	movw	r24, r28
 3ac:	0a 96       	adiw	r24, 0x0a	; 10
 3ae:	0e 94 49 00 	call	0x92	; 0x92 <_ZN8CAvrGpio4InitEPVhai>
	timer.Init(CAvrTimer::psc256);
 3b2:	64 e0       	ldi	r22, 0x04	; 4
 3b4:	ce 01       	movw	r24, r28
 3b6:	0d 96       	adiw	r24, 0x0d	; 13
 3b8:	0e 94 9f 00 	call	0x13e	; 0x13e <_ZN9CAvrTimer4InitENS_12avrPrescalerE>
	heartBeat.Init(&led,&timer,30000);
 3bc:	20 e3       	ldi	r18, 0x30	; 48
 3be:	35 e7       	ldi	r19, 0x75	; 117
 3c0:	ae 01       	movw	r20, r28
 3c2:	43 5f       	subi	r20, 0xF3	; 243
 3c4:	5f 4f       	sbci	r21, 0xFF	; 255
 3c6:	be 01       	movw	r22, r28
 3c8:	66 5f       	subi	r22, 0xF6	; 246
 3ca:	7f 4f       	sbci	r23, 0xFF	; 255
 3cc:	ce 01       	movw	r24, r28
 3ce:	01 96       	adiw	r24, 0x01	; 1
 3d0:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN10CHeartBeat4InitEP8CAvrGpioP9CAvrTimerj>
    
    // lcd init
    CAvrGpio pRs;
 3d4:	ce 01       	movw	r24, r28
 3d6:	0e 96       	adiw	r24, 0x0e	; 14
 3d8:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN8CAvrGpioC1Ev>
    CAvrGpio pEn;
 3dc:	ce 01       	movw	r24, r28
 3de:	41 96       	adiw	r24, 0x11	; 17
 3e0:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN8CAvrGpioC1Ev>
    CAvrGpio pRw;
 3e4:	ce 01       	movw	r24, r28
 3e6:	44 96       	adiw	r24, 0x14	; 20
 3e8:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN8CAvrGpioC1Ev>
    CAvrGpio dT[4];
 3ec:	5e 01       	movw	r10, r28
 3ee:	87 e1       	ldi	r24, 0x17	; 23
 3f0:	a8 0e       	add	r10, r24
 3f2:	b1 1c       	adc	r11, r1
 3f4:	c5 01       	movw	r24, r10
 3f6:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN8CAvrGpioC1Ev>
 3fa:	6e 01       	movw	r12, r28
 3fc:	8a e1       	ldi	r24, 0x1A	; 26
 3fe:	c8 0e       	add	r12, r24
 400:	d1 1c       	adc	r13, r1
 402:	c6 01       	movw	r24, r12
 404:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN8CAvrGpioC1Ev>
 408:	7e 01       	movw	r14, r28
 40a:	8d e1       	ldi	r24, 0x1D	; 29
 40c:	e8 0e       	add	r14, r24
 40e:	f1 1c       	adc	r15, r1
 410:	c7 01       	movw	r24, r14
 412:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN8CAvrGpioC1Ev>
 416:	8e 01       	movw	r16, r28
 418:	00 5e       	subi	r16, 0xE0	; 224
 41a:	1f 4f       	sbci	r17, 0xFF	; 255
 41c:	c8 01       	movw	r24, r16
 41e:	0e 94 9e 00 	call	0x13c	; 0x13c <_ZN8CAvrGpioC1Ev>
    CAvrGpio *pDt[4];
    pRs.Init(PIN_RS,1);
 422:	21 e0       	ldi	r18, 0x01	; 1
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	40 e0       	ldi	r20, 0x00	; 0
 428:	63 e3       	ldi	r22, 0x33	; 51
 42a:	70 e0       	ldi	r23, 0x00	; 0
 42c:	ce 01       	movw	r24, r28
 42e:	0e 96       	adiw	r24, 0x0e	; 14
 430:	0e 94 49 00 	call	0x92	; 0x92 <_ZN8CAvrGpio4InitEPVhai>
    pEn.Init(PIN_EN,1);
 434:	21 e0       	ldi	r18, 0x01	; 1
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	41 e0       	ldi	r20, 0x01	; 1
 43a:	63 e3       	ldi	r22, 0x33	; 51
 43c:	70 e0       	ldi	r23, 0x00	; 0
 43e:	ce 01       	movw	r24, r28
 440:	41 96       	adiw	r24, 0x11	; 17
 442:	0e 94 49 00 	call	0x92	; 0x92 <_ZN8CAvrGpio4InitEPVhai>
    pRw.Init(PIN_RW,1);
 446:	21 e0       	ldi	r18, 0x01	; 1
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	42 e0       	ldi	r20, 0x02	; 2
 44c:	63 e3       	ldi	r22, 0x33	; 51
 44e:	70 e0       	ldi	r23, 0x00	; 0
 450:	ce 01       	movw	r24, r28
 452:	44 96       	adiw	r24, 0x14	; 20
 454:	0e 94 49 00 	call	0x92	; 0x92 <_ZN8CAvrGpio4InitEPVhai>
    dT[0].Init(PIN_DT4,1);
 458:	21 e0       	ldi	r18, 0x01	; 1
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	44 e0       	ldi	r20, 0x04	; 4
 45e:	63 e3       	ldi	r22, 0x33	; 51
 460:	70 e0       	ldi	r23, 0x00	; 0
 462:	c5 01       	movw	r24, r10
 464:	0e 94 49 00 	call	0x92	; 0x92 <_ZN8CAvrGpio4InitEPVhai>
    dT[1].Init(PIN_DT5,1);
 468:	21 e0       	ldi	r18, 0x01	; 1
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	45 e0       	ldi	r20, 0x05	; 5
 46e:	63 e3       	ldi	r22, 0x33	; 51
 470:	70 e0       	ldi	r23, 0x00	; 0
 472:	c6 01       	movw	r24, r12
 474:	0e 94 49 00 	call	0x92	; 0x92 <_ZN8CAvrGpio4InitEPVhai>
    dT[2].Init(PIN_DT6,1);
 478:	21 e0       	ldi	r18, 0x01	; 1
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	46 e0       	ldi	r20, 0x06	; 6
 47e:	63 e3       	ldi	r22, 0x33	; 51
 480:	70 e0       	ldi	r23, 0x00	; 0
 482:	c7 01       	movw	r24, r14
 484:	0e 94 49 00 	call	0x92	; 0x92 <_ZN8CAvrGpio4InitEPVhai>
    dT[3].Init(PIN_DT7,1);
 488:	21 e0       	ldi	r18, 0x01	; 1
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	47 e0       	ldi	r20, 0x07	; 7
 48e:	63 e3       	ldi	r22, 0x33	; 51
 490:	70 e0       	ldi	r23, 0x00	; 0
 492:	c8 01       	movw	r24, r16
 494:	0e 94 49 00 	call	0x92	; 0x92 <_ZN8CAvrGpio4InitEPVhai>
    for(uint8_t i=0;i<4;i++)
    {
        pDt[i] = &dT[i];
 498:	bc a2       	std	Y+36, r11	; 0x24
 49a:	ab a2       	std	Y+35, r10	; 0x23
 49c:	de a2       	std	Y+38, r13	; 0x26
 49e:	cd a2       	std	Y+37, r12	; 0x25
 4a0:	f8 a6       	std	Y+40, r15	; 0x28
 4a2:	ef a2       	std	Y+39, r14	; 0x27
 4a4:	1a a7       	std	Y+42, r17	; 0x2a
 4a6:	09 a7       	std	Y+41, r16	; 0x29
    };   
    CLcd lcd;
    lcd.Init(&pRs,&pEn,&pRw,pDt);
 4a8:	68 94       	set
 4aa:	cc 24       	eor	r12, r12
 4ac:	c1 f8       	bld	r12, 1
 4ae:	68 94       	set
 4b0:	ee 24       	eor	r14, r14
 4b2:	e4 f8       	bld	r14, 4
 4b4:	0d 5f       	subi	r16, 0xFD	; 253
 4b6:	1f 4f       	sbci	r17, 0xFF	; 255
 4b8:	9e 01       	movw	r18, r28
 4ba:	2c 5e       	subi	r18, 0xEC	; 236
 4bc:	3f 4f       	sbci	r19, 0xFF	; 255
 4be:	ae 01       	movw	r20, r28
 4c0:	4f 5e       	subi	r20, 0xEF	; 239
 4c2:	5f 4f       	sbci	r21, 0xFF	; 255
 4c4:	be 01       	movw	r22, r28
 4c6:	62 5f       	subi	r22, 0xF2	; 242
 4c8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ca:	ce 01       	movw	r24, r28
 4cc:	8b 96       	adiw	r24, 0x2b	; 43
 4ce:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_ZN4CLcd4InitEP8CAvrGpioS1_S1_PS1_hh>
    while (1) 
    {
        heartBeat.Execute();
 4d2:	ce 01       	movw	r24, r28
 4d4:	01 96       	adiw	r24, 0x01	; 1
 4d6:	0e 94 ba 00 	call	0x174	; 0x174 <_ZN10CHeartBeat7ExecuteEv>
 4da:	fb cf       	rjmp	.-10     	; 0x4d2 <__stack+0x73>

000004dc <_ZN8CTimeout4InitEP9CAvrTimer>:

#include "Timeout.h"

void CTimeout::Init(CAvrTimer *timerInstance)
{
	m_timer=timerInstance;
 4dc:	fc 01       	movw	r30, r24
 4de:	71 83       	std	Z+1, r23	; 0x01
 4e0:	60 83       	st	Z, r22
 4e2:	08 95       	ret

000004e4 <_ZN8CTimeout5ResetEv>:
}

void CTimeout::Reset()
{
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
 4e8:	ec 01       	movw	r28, r24
	m_prevTimer=m_timer->GetTick();
 4ea:	88 81       	ld	r24, Y
 4ec:	99 81       	ldd	r25, Y+1	; 0x01
 4ee:	0e 94 a1 00 	call	0x142	; 0x142 <_ZN9CAvrTimer7GetTickEv>
 4f2:	9d 83       	std	Y+5, r25	; 0x05
 4f4:	8c 83       	std	Y+4, r24	; 0x04
	m_hasElapsed=false;
 4f6:	1e 82       	std	Y+6, r1	; 0x06
}
 4f8:	df 91       	pop	r29
 4fa:	cf 91       	pop	r28
 4fc:	08 95       	ret

000004fe <_ZN8CTimeout9SetExpiryEj>:

void CTimeout::SetExpiry(uint16_t tick)
{
	m_expiry=tick;
 4fe:	fc 01       	movw	r30, r24
 500:	73 83       	std	Z+3, r23	; 0x03
 502:	62 83       	std	Z+2, r22	; 0x02
	Reset();
 504:	0e 94 72 02 	call	0x4e4	; 0x4e4 <_ZN8CTimeout5ResetEv>
 508:	08 95       	ret

0000050a <_ZN8CTimeout10HasElapsedEv>:
}

bool CTimeout::HasElapsed()
{
 50a:	cf 93       	push	r28
 50c:	df 93       	push	r29
 50e:	ec 01       	movw	r28, r24
	if(!m_hasElapsed)
 510:	8e 81       	ldd	r24, Y+6	; 0x06
 512:	81 11       	cpse	r24, r1
 514:	0f c0       	rjmp	.+30     	; 0x534 <_ZN8CTimeout10HasElapsedEv+0x2a>
	if(m_timer->GetTick()-m_prevTimer>=m_expiry)
 516:	88 81       	ld	r24, Y
 518:	99 81       	ldd	r25, Y+1	; 0x01
 51a:	0e 94 a1 00 	call	0x142	; 0x142 <_ZN9CAvrTimer7GetTickEv>
 51e:	2c 81       	ldd	r18, Y+4	; 0x04
 520:	3d 81       	ldd	r19, Y+5	; 0x05
 522:	82 1b       	sub	r24, r18
 524:	93 0b       	sbc	r25, r19
 526:	2a 81       	ldd	r18, Y+2	; 0x02
 528:	3b 81       	ldd	r19, Y+3	; 0x03
 52a:	82 17       	cp	r24, r18
 52c:	93 07       	cpc	r25, r19
 52e:	10 f0       	brcs	.+4      	; 0x534 <_ZN8CTimeout10HasElapsedEv+0x2a>
	m_hasElapsed=true;
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	8e 83       	std	Y+6, r24	; 0x06
	
	return m_hasElapsed;
}
 534:	8e 81       	ldd	r24, Y+6	; 0x06
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	08 95       	ret

0000053c <_ZN8CTimeoutC1Ev>:

// default constructor
CTimeout::CTimeout()
 53c:	08 95       	ret

0000053e <malloc>:
 53e:	0f 93       	push	r16
 540:	1f 93       	push	r17
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
 546:	82 30       	cpi	r24, 0x02	; 2
 548:	91 05       	cpc	r25, r1
 54a:	10 f4       	brcc	.+4      	; 0x550 <malloc+0x12>
 54c:	82 e0       	ldi	r24, 0x02	; 2
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__flp>
 554:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__flp+0x1>
 558:	20 e0       	ldi	r18, 0x00	; 0
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	a0 e0       	ldi	r26, 0x00	; 0
 55e:	b0 e0       	ldi	r27, 0x00	; 0
 560:	30 97       	sbiw	r30, 0x00	; 0
 562:	19 f1       	breq	.+70     	; 0x5aa <malloc+0x6c>
 564:	40 81       	ld	r20, Z
 566:	51 81       	ldd	r21, Z+1	; 0x01
 568:	02 81       	ldd	r16, Z+2	; 0x02
 56a:	13 81       	ldd	r17, Z+3	; 0x03
 56c:	48 17       	cp	r20, r24
 56e:	59 07       	cpc	r21, r25
 570:	c8 f0       	brcs	.+50     	; 0x5a4 <malloc+0x66>
 572:	84 17       	cp	r24, r20
 574:	95 07       	cpc	r25, r21
 576:	69 f4       	brne	.+26     	; 0x592 <malloc+0x54>
 578:	10 97       	sbiw	r26, 0x00	; 0
 57a:	31 f0       	breq	.+12     	; 0x588 <malloc+0x4a>
 57c:	12 96       	adiw	r26, 0x02	; 2
 57e:	0c 93       	st	X, r16
 580:	12 97       	sbiw	r26, 0x02	; 2
 582:	13 96       	adiw	r26, 0x03	; 3
 584:	1c 93       	st	X, r17
 586:	27 c0       	rjmp	.+78     	; 0x5d6 <malloc+0x98>
 588:	00 93 68 00 	sts	0x0068, r16	; 0x800068 <__flp>
 58c:	10 93 69 00 	sts	0x0069, r17	; 0x800069 <__flp+0x1>
 590:	22 c0       	rjmp	.+68     	; 0x5d6 <malloc+0x98>
 592:	21 15       	cp	r18, r1
 594:	31 05       	cpc	r19, r1
 596:	19 f0       	breq	.+6      	; 0x59e <malloc+0x60>
 598:	42 17       	cp	r20, r18
 59a:	53 07       	cpc	r21, r19
 59c:	18 f4       	brcc	.+6      	; 0x5a4 <malloc+0x66>
 59e:	9a 01       	movw	r18, r20
 5a0:	bd 01       	movw	r22, r26
 5a2:	ef 01       	movw	r28, r30
 5a4:	df 01       	movw	r26, r30
 5a6:	f8 01       	movw	r30, r16
 5a8:	db cf       	rjmp	.-74     	; 0x560 <malloc+0x22>
 5aa:	21 15       	cp	r18, r1
 5ac:	31 05       	cpc	r19, r1
 5ae:	f9 f0       	breq	.+62     	; 0x5ee <malloc+0xb0>
 5b0:	28 1b       	sub	r18, r24
 5b2:	39 0b       	sbc	r19, r25
 5b4:	24 30       	cpi	r18, 0x04	; 4
 5b6:	31 05       	cpc	r19, r1
 5b8:	80 f4       	brcc	.+32     	; 0x5da <malloc+0x9c>
 5ba:	8a 81       	ldd	r24, Y+2	; 0x02
 5bc:	9b 81       	ldd	r25, Y+3	; 0x03
 5be:	61 15       	cp	r22, r1
 5c0:	71 05       	cpc	r23, r1
 5c2:	21 f0       	breq	.+8      	; 0x5cc <malloc+0x8e>
 5c4:	fb 01       	movw	r30, r22
 5c6:	93 83       	std	Z+3, r25	; 0x03
 5c8:	82 83       	std	Z+2, r24	; 0x02
 5ca:	04 c0       	rjmp	.+8      	; 0x5d4 <malloc+0x96>
 5cc:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__flp+0x1>
 5d0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__flp>
 5d4:	fe 01       	movw	r30, r28
 5d6:	32 96       	adiw	r30, 0x02	; 2
 5d8:	44 c0       	rjmp	.+136    	; 0x662 <malloc+0x124>
 5da:	fe 01       	movw	r30, r28
 5dc:	e2 0f       	add	r30, r18
 5de:	f3 1f       	adc	r31, r19
 5e0:	81 93       	st	Z+, r24
 5e2:	91 93       	st	Z+, r25
 5e4:	22 50       	subi	r18, 0x02	; 2
 5e6:	31 09       	sbc	r19, r1
 5e8:	39 83       	std	Y+1, r19	; 0x01
 5ea:	28 83       	st	Y, r18
 5ec:	3a c0       	rjmp	.+116    	; 0x662 <malloc+0x124>
 5ee:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__data_end>
 5f2:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <__data_end+0x1>
 5f6:	23 2b       	or	r18, r19
 5f8:	41 f4       	brne	.+16     	; 0x60a <malloc+0xcc>
 5fa:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 5fe:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 602:	30 93 67 00 	sts	0x0067, r19	; 0x800067 <__data_end+0x1>
 606:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <__data_end>
 60a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 60e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 612:	21 15       	cp	r18, r1
 614:	31 05       	cpc	r19, r1
 616:	41 f4       	brne	.+16     	; 0x628 <malloc+0xea>
 618:	2d b7       	in	r18, 0x3d	; 61
 61a:	3e b7       	in	r19, 0x3e	; 62
 61c:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 620:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 624:	24 1b       	sub	r18, r20
 626:	35 0b       	sbc	r19, r21
 628:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <__data_end>
 62c:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <__data_end+0x1>
 630:	e2 17       	cp	r30, r18
 632:	f3 07       	cpc	r31, r19
 634:	a0 f4       	brcc	.+40     	; 0x65e <malloc+0x120>
 636:	2e 1b       	sub	r18, r30
 638:	3f 0b       	sbc	r19, r31
 63a:	28 17       	cp	r18, r24
 63c:	39 07       	cpc	r19, r25
 63e:	78 f0       	brcs	.+30     	; 0x65e <malloc+0x120>
 640:	ac 01       	movw	r20, r24
 642:	4e 5f       	subi	r20, 0xFE	; 254
 644:	5f 4f       	sbci	r21, 0xFF	; 255
 646:	24 17       	cp	r18, r20
 648:	35 07       	cpc	r19, r21
 64a:	48 f0       	brcs	.+18     	; 0x65e <malloc+0x120>
 64c:	4e 0f       	add	r20, r30
 64e:	5f 1f       	adc	r21, r31
 650:	50 93 67 00 	sts	0x0067, r21	; 0x800067 <__data_end+0x1>
 654:	40 93 66 00 	sts	0x0066, r20	; 0x800066 <__data_end>
 658:	81 93       	st	Z+, r24
 65a:	91 93       	st	Z+, r25
 65c:	02 c0       	rjmp	.+4      	; 0x662 <malloc+0x124>
 65e:	e0 e0       	ldi	r30, 0x00	; 0
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	cf 01       	movw	r24, r30
 664:	df 91       	pop	r29
 666:	cf 91       	pop	r28
 668:	1f 91       	pop	r17
 66a:	0f 91       	pop	r16
 66c:	08 95       	ret

0000066e <free>:
 66e:	cf 93       	push	r28
 670:	df 93       	push	r29
 672:	00 97       	sbiw	r24, 0x00	; 0
 674:	09 f4       	brne	.+2      	; 0x678 <free+0xa>
 676:	81 c0       	rjmp	.+258    	; 0x77a <free+0x10c>
 678:	fc 01       	movw	r30, r24
 67a:	32 97       	sbiw	r30, 0x02	; 2
 67c:	13 82       	std	Z+3, r1	; 0x03
 67e:	12 82       	std	Z+2, r1	; 0x02
 680:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <__flp>
 684:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <__flp+0x1>
 688:	10 97       	sbiw	r26, 0x00	; 0
 68a:	81 f4       	brne	.+32     	; 0x6ac <free+0x3e>
 68c:	20 81       	ld	r18, Z
 68e:	31 81       	ldd	r19, Z+1	; 0x01
 690:	82 0f       	add	r24, r18
 692:	93 1f       	adc	r25, r19
 694:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__data_end>
 698:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <__data_end+0x1>
 69c:	28 17       	cp	r18, r24
 69e:	39 07       	cpc	r19, r25
 6a0:	51 f5       	brne	.+84     	; 0x6f6 <free+0x88>
 6a2:	f0 93 67 00 	sts	0x0067, r31	; 0x800067 <__data_end+0x1>
 6a6:	e0 93 66 00 	sts	0x0066, r30	; 0x800066 <__data_end>
 6aa:	67 c0       	rjmp	.+206    	; 0x77a <free+0x10c>
 6ac:	ed 01       	movw	r28, r26
 6ae:	20 e0       	ldi	r18, 0x00	; 0
 6b0:	30 e0       	ldi	r19, 0x00	; 0
 6b2:	ce 17       	cp	r28, r30
 6b4:	df 07       	cpc	r29, r31
 6b6:	40 f4       	brcc	.+16     	; 0x6c8 <free+0x5a>
 6b8:	4a 81       	ldd	r20, Y+2	; 0x02
 6ba:	5b 81       	ldd	r21, Y+3	; 0x03
 6bc:	9e 01       	movw	r18, r28
 6be:	41 15       	cp	r20, r1
 6c0:	51 05       	cpc	r21, r1
 6c2:	f1 f0       	breq	.+60     	; 0x700 <free+0x92>
 6c4:	ea 01       	movw	r28, r20
 6c6:	f5 cf       	rjmp	.-22     	; 0x6b2 <free+0x44>
 6c8:	d3 83       	std	Z+3, r29	; 0x03
 6ca:	c2 83       	std	Z+2, r28	; 0x02
 6cc:	40 81       	ld	r20, Z
 6ce:	51 81       	ldd	r21, Z+1	; 0x01
 6d0:	84 0f       	add	r24, r20
 6d2:	95 1f       	adc	r25, r21
 6d4:	c8 17       	cp	r28, r24
 6d6:	d9 07       	cpc	r29, r25
 6d8:	59 f4       	brne	.+22     	; 0x6f0 <free+0x82>
 6da:	88 81       	ld	r24, Y
 6dc:	99 81       	ldd	r25, Y+1	; 0x01
 6de:	84 0f       	add	r24, r20
 6e0:	95 1f       	adc	r25, r21
 6e2:	02 96       	adiw	r24, 0x02	; 2
 6e4:	91 83       	std	Z+1, r25	; 0x01
 6e6:	80 83       	st	Z, r24
 6e8:	8a 81       	ldd	r24, Y+2	; 0x02
 6ea:	9b 81       	ldd	r25, Y+3	; 0x03
 6ec:	93 83       	std	Z+3, r25	; 0x03
 6ee:	82 83       	std	Z+2, r24	; 0x02
 6f0:	21 15       	cp	r18, r1
 6f2:	31 05       	cpc	r19, r1
 6f4:	29 f4       	brne	.+10     	; 0x700 <free+0x92>
 6f6:	f0 93 69 00 	sts	0x0069, r31	; 0x800069 <__flp+0x1>
 6fa:	e0 93 68 00 	sts	0x0068, r30	; 0x800068 <__flp>
 6fe:	3d c0       	rjmp	.+122    	; 0x77a <free+0x10c>
 700:	e9 01       	movw	r28, r18
 702:	fb 83       	std	Y+3, r31	; 0x03
 704:	ea 83       	std	Y+2, r30	; 0x02
 706:	49 91       	ld	r20, Y+
 708:	59 91       	ld	r21, Y+
 70a:	c4 0f       	add	r28, r20
 70c:	d5 1f       	adc	r29, r21
 70e:	ec 17       	cp	r30, r28
 710:	fd 07       	cpc	r31, r29
 712:	61 f4       	brne	.+24     	; 0x72c <free+0xbe>
 714:	80 81       	ld	r24, Z
 716:	91 81       	ldd	r25, Z+1	; 0x01
 718:	84 0f       	add	r24, r20
 71a:	95 1f       	adc	r25, r21
 71c:	02 96       	adiw	r24, 0x02	; 2
 71e:	e9 01       	movw	r28, r18
 720:	99 83       	std	Y+1, r25	; 0x01
 722:	88 83       	st	Y, r24
 724:	82 81       	ldd	r24, Z+2	; 0x02
 726:	93 81       	ldd	r25, Z+3	; 0x03
 728:	9b 83       	std	Y+3, r25	; 0x03
 72a:	8a 83       	std	Y+2, r24	; 0x02
 72c:	e0 e0       	ldi	r30, 0x00	; 0
 72e:	f0 e0       	ldi	r31, 0x00	; 0
 730:	12 96       	adiw	r26, 0x02	; 2
 732:	8d 91       	ld	r24, X+
 734:	9c 91       	ld	r25, X
 736:	13 97       	sbiw	r26, 0x03	; 3
 738:	00 97       	sbiw	r24, 0x00	; 0
 73a:	19 f0       	breq	.+6      	; 0x742 <free+0xd4>
 73c:	fd 01       	movw	r30, r26
 73e:	dc 01       	movw	r26, r24
 740:	f7 cf       	rjmp	.-18     	; 0x730 <free+0xc2>
 742:	8d 91       	ld	r24, X+
 744:	9c 91       	ld	r25, X
 746:	11 97       	sbiw	r26, 0x01	; 1
 748:	9d 01       	movw	r18, r26
 74a:	2e 5f       	subi	r18, 0xFE	; 254
 74c:	3f 4f       	sbci	r19, 0xFF	; 255
 74e:	82 0f       	add	r24, r18
 750:	93 1f       	adc	r25, r19
 752:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__data_end>
 756:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <__data_end+0x1>
 75a:	28 17       	cp	r18, r24
 75c:	39 07       	cpc	r19, r25
 75e:	69 f4       	brne	.+26     	; 0x77a <free+0x10c>
 760:	30 97       	sbiw	r30, 0x00	; 0
 762:	29 f4       	brne	.+10     	; 0x76e <free+0x100>
 764:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__flp+0x1>
 768:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__flp>
 76c:	02 c0       	rjmp	.+4      	; 0x772 <free+0x104>
 76e:	13 82       	std	Z+3, r1	; 0x03
 770:	12 82       	std	Z+2, r1	; 0x02
 772:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <__data_end+0x1>
 776:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <__data_end>
 77a:	df 91       	pop	r29
 77c:	cf 91       	pop	r28
 77e:	08 95       	ret

00000780 <_exit>:
 780:	f8 94       	cli

00000782 <__stop_program>:
 782:	ff cf       	rjmp	.-2      	; 0x782 <__stop_program>
